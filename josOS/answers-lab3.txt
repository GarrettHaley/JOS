************************
LAB 3 WRITE-UP
Garrett Haley
CS 444
************************

1.) What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

ANSWER: If exceptions/interrupts were all delivered to the same handler, different trap numbers could not be pushed onto the stack before calling trap and therefore the kernel code in the trap function would not be able to distinguish between the different exceptions/interrupts.


2.) Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

ANSWER: No, the user/softint program is supposed to produce the interrupt vector 13 in this case. The user currently has ring 3 permissions, but is requesting an interrupt which only the kernel (ring 0) is allowed to produce. Therefore, user/softint is generating a general protection fault (trap 13) to prevent the user from violating their standing privileges.


3.) The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

ANSWER: The break point test requires the break point trap be set with user privileges (ring 3) instead of kernel privileges (ring 0). Therefore, I had to set the last parameter in SETGATE to 3 (DPL = 3). If I instead implemented the break point test to have DPL = 0, the general protection fault would be invoked instead of the break point trap as the user would be violating their standing privileges (trying to access ring 0 with ring 3 permission).

4.) What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?

ANSWER: These mechanisms were designed to enforce permissions to protect the device the operating system is running on. We do not want programs to be able to arbitrarily access any data on the device, or arbitrarily run code with kernel level permissions.


